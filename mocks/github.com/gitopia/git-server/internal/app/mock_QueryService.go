// Code generated by mockery v2.40.3. DO NOT EDIT.

package app

import (
	context "context"

	types "github.com/gitopia/gitopia/v4/x/gitopia/types"
	mock "github.com/stretchr/testify/mock"
)

// MockQueryService is an autogenerated mock type for the QueryService type
type MockQueryService struct {
	mock.Mock
}

type MockQueryService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueryService) EXPECT() *MockQueryService_Expecter {
	return &MockQueryService_Expecter{mock: &_m.Mock}
}

// GitopiaRepositoryStorage provides a mock function with given fields: ctx, req
func (_m *MockQueryService) GitopiaRepositoryStorage(ctx context.Context, req *types.QueryGetRepositoryStorageRequest) (*types.QueryGetRepositoryStorageResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GitopiaRepositoryStorage")
	}

	var r0 *types.QueryGetRepositoryStorageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetRepositoryStorageRequest) (*types.QueryGetRepositoryStorageResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetRepositoryStorageRequest) *types.QueryGetRepositoryStorageResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryGetRepositoryStorageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetRepositoryStorageRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueryService_GitopiaRepositoryStorage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GitopiaRepositoryStorage'
type MockQueryService_GitopiaRepositoryStorage_Call struct {
	*mock.Call
}

// GitopiaRepositoryStorage is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.QueryGetRepositoryStorageRequest
func (_e *MockQueryService_Expecter) GitopiaRepositoryStorage(ctx interface{}, req interface{}) *MockQueryService_GitopiaRepositoryStorage_Call {
	return &MockQueryService_GitopiaRepositoryStorage_Call{Call: _e.mock.On("GitopiaRepositoryStorage", ctx, req)}
}

func (_c *MockQueryService_GitopiaRepositoryStorage_Call) Run(run func(ctx context.Context, req *types.QueryGetRepositoryStorageRequest)) *MockQueryService_GitopiaRepositoryStorage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.QueryGetRepositoryStorageRequest))
	})
	return _c
}

func (_c *MockQueryService_GitopiaRepositoryStorage_Call) Return(_a0 *types.QueryGetRepositoryStorageResponse, _a1 error) *MockQueryService_GitopiaRepositoryStorage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueryService_GitopiaRepositoryStorage_Call) RunAndReturn(run func(context.Context, *types.QueryGetRepositoryStorageRequest) (*types.QueryGetRepositoryStorageResponse, error)) *MockQueryService_GitopiaRepositoryStorage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQueryService creates a new instance of MockQueryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueryService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueryService {
	mock := &MockQueryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
