// Code generated by mockery v2.49.1. DO NOT EDIT.

package app

import (
	context "context"

	storagetypes "github.com/gitopia/gitopia/v6/x/storage/types"
	mock "github.com/stretchr/testify/mock"

	types "github.com/gitopia/gitopia/v6/x/gitopia/types"
)

// MockQueryService is an autogenerated mock type for the QueryService type
type MockQueryService struct {
	mock.Mock
}

type MockQueryService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueryService) EXPECT() *MockQueryService_Expecter {
	return &MockQueryService_Expecter{mock: &_m.Mock}
}

// GitopiaRepository provides a mock function with given fields: ctx, req
func (_m *MockQueryService) GitopiaRepository(ctx context.Context, req *types.QueryGetRepositoryRequest) (*types.QueryGetRepositoryResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GitopiaRepository")
	}

	var r0 *types.QueryGetRepositoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetRepositoryRequest) (*types.QueryGetRepositoryResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetRepositoryRequest) *types.QueryGetRepositoryResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryGetRepositoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetRepositoryRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueryService_GitopiaRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GitopiaRepository'
type MockQueryService_GitopiaRepository_Call struct {
	*mock.Call
}

// GitopiaRepository is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.QueryGetRepositoryRequest
func (_e *MockQueryService_Expecter) GitopiaRepository(ctx interface{}, req interface{}) *MockQueryService_GitopiaRepository_Call {
	return &MockQueryService_GitopiaRepository_Call{Call: _e.mock.On("GitopiaRepository", ctx, req)}
}

func (_c *MockQueryService_GitopiaRepository_Call) Run(run func(ctx context.Context, req *types.QueryGetRepositoryRequest)) *MockQueryService_GitopiaRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.QueryGetRepositoryRequest))
	})
	return _c
}

func (_c *MockQueryService_GitopiaRepository_Call) Return(_a0 *types.QueryGetRepositoryResponse, _a1 error) *MockQueryService_GitopiaRepository_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueryService_GitopiaRepository_Call) RunAndReturn(run func(context.Context, *types.QueryGetRepositoryRequest) (*types.QueryGetRepositoryResponse, error)) *MockQueryService_GitopiaRepository_Call {
	_c.Call.Return(run)
	return _c
}

// GitopiaRepositoryBranches provides a mock function with given fields: ctx, req
func (_m *MockQueryService) GitopiaRepositoryBranches(ctx context.Context, req *types.QueryAllRepositoryBranchRequest) (*types.QueryAllRepositoryBranchResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GitopiaRepositoryBranches")
	}

	var r0 *types.QueryAllRepositoryBranchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryAllRepositoryBranchRequest) (*types.QueryAllRepositoryBranchResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryAllRepositoryBranchRequest) *types.QueryAllRepositoryBranchResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryAllRepositoryBranchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryAllRepositoryBranchRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueryService_GitopiaRepositoryBranches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GitopiaRepositoryBranches'
type MockQueryService_GitopiaRepositoryBranches_Call struct {
	*mock.Call
}

// GitopiaRepositoryBranches is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.QueryAllRepositoryBranchRequest
func (_e *MockQueryService_Expecter) GitopiaRepositoryBranches(ctx interface{}, req interface{}) *MockQueryService_GitopiaRepositoryBranches_Call {
	return &MockQueryService_GitopiaRepositoryBranches_Call{Call: _e.mock.On("GitopiaRepositoryBranches", ctx, req)}
}

func (_c *MockQueryService_GitopiaRepositoryBranches_Call) Run(run func(ctx context.Context, req *types.QueryAllRepositoryBranchRequest)) *MockQueryService_GitopiaRepositoryBranches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.QueryAllRepositoryBranchRequest))
	})
	return _c
}

func (_c *MockQueryService_GitopiaRepositoryBranches_Call) Return(_a0 *types.QueryAllRepositoryBranchResponse, _a1 error) *MockQueryService_GitopiaRepositoryBranches_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueryService_GitopiaRepositoryBranches_Call) RunAndReturn(run func(context.Context, *types.QueryAllRepositoryBranchRequest) (*types.QueryAllRepositoryBranchResponse, error)) *MockQueryService_GitopiaRepositoryBranches_Call {
	_c.Call.Return(run)
	return _c
}

// GitopiaRepositoryPackfile provides a mock function with given fields: ctx, req
func (_m *MockQueryService) GitopiaRepositoryPackfile(ctx context.Context, req *storagetypes.QueryRepositoryPackfileRequest) (*storagetypes.QueryRepositoryPackfileResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GitopiaRepositoryPackfile")
	}

	var r0 *storagetypes.QueryRepositoryPackfileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagetypes.QueryRepositoryPackfileRequest) (*storagetypes.QueryRepositoryPackfileResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagetypes.QueryRepositoryPackfileRequest) *storagetypes.QueryRepositoryPackfileResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagetypes.QueryRepositoryPackfileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagetypes.QueryRepositoryPackfileRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueryService_GitopiaRepositoryPackfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GitopiaRepositoryPackfile'
type MockQueryService_GitopiaRepositoryPackfile_Call struct {
	*mock.Call
}

// GitopiaRepositoryPackfile is a helper method to define mock.On call
//   - ctx context.Context
//   - req *storagetypes.QueryRepositoryPackfileRequest
func (_e *MockQueryService_Expecter) GitopiaRepositoryPackfile(ctx interface{}, req interface{}) *MockQueryService_GitopiaRepositoryPackfile_Call {
	return &MockQueryService_GitopiaRepositoryPackfile_Call{Call: _e.mock.On("GitopiaRepositoryPackfile", ctx, req)}
}

func (_c *MockQueryService_GitopiaRepositoryPackfile_Call) Run(run func(ctx context.Context, req *storagetypes.QueryRepositoryPackfileRequest)) *MockQueryService_GitopiaRepositoryPackfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*storagetypes.QueryRepositoryPackfileRequest))
	})
	return _c
}

func (_c *MockQueryService_GitopiaRepositoryPackfile_Call) Return(_a0 *storagetypes.QueryRepositoryPackfileResponse, _a1 error) *MockQueryService_GitopiaRepositoryPackfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueryService_GitopiaRepositoryPackfile_Call) RunAndReturn(run func(context.Context, *storagetypes.QueryRepositoryPackfileRequest) (*storagetypes.QueryRepositoryPackfileResponse, error)) *MockQueryService_GitopiaRepositoryPackfile_Call {
	_c.Call.Return(run)
	return _c
}

// GitopiaRepositoryTags provides a mock function with given fields: ctx, req
func (_m *MockQueryService) GitopiaRepositoryTags(ctx context.Context, req *types.QueryAllRepositoryTagRequest) (*types.QueryAllRepositoryTagResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GitopiaRepositoryTags")
	}

	var r0 *types.QueryAllRepositoryTagResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryAllRepositoryTagRequest) (*types.QueryAllRepositoryTagResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryAllRepositoryTagRequest) *types.QueryAllRepositoryTagResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryAllRepositoryTagResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryAllRepositoryTagRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueryService_GitopiaRepositoryTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GitopiaRepositoryTags'
type MockQueryService_GitopiaRepositoryTags_Call struct {
	*mock.Call
}

// GitopiaRepositoryTags is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.QueryAllRepositoryTagRequest
func (_e *MockQueryService_Expecter) GitopiaRepositoryTags(ctx interface{}, req interface{}) *MockQueryService_GitopiaRepositoryTags_Call {
	return &MockQueryService_GitopiaRepositoryTags_Call{Call: _e.mock.On("GitopiaRepositoryTags", ctx, req)}
}

func (_c *MockQueryService_GitopiaRepositoryTags_Call) Run(run func(ctx context.Context, req *types.QueryAllRepositoryTagRequest)) *MockQueryService_GitopiaRepositoryTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.QueryAllRepositoryTagRequest))
	})
	return _c
}

func (_c *MockQueryService_GitopiaRepositoryTags_Call) Return(_a0 *types.QueryAllRepositoryTagResponse, _a1 error) *MockQueryService_GitopiaRepositoryTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueryService_GitopiaRepositoryTags_Call) RunAndReturn(run func(context.Context, *types.QueryAllRepositoryTagRequest) (*types.QueryAllRepositoryTagResponse, error)) *MockQueryService_GitopiaRepositoryTags_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQueryService creates a new instance of MockQueryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueryService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueryService {
	mock := &MockQueryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
